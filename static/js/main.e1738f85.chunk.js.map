{"version":3,"sources":["components/TodoTask/index.js","components/NewTaskForm/index.js","components/TodoList/index.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTask","title","id","checked","deleteTaskHandler","editTaskHandler","checkTaskHandler","useState","inputValue","setInputValue","editMode","setEditMode","className","onClick","e","target","classList","contains","value","autoFocus","onChange","NewTaskForm","addTaskHandler","newTaskTitle","setNewTaskTitle","onSubmit","preventDefault","replace","alert","type","maxlength","placeholder","disabled","TodoList","tasks","taskList","setTaskList","newTaskList","nanoid","map","task","index","findIndex","splice","deleteTask","newTitle","editTask","checkTask","defaultTasks","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1738f85.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function TodoTask({\n  title,\n  id,\n  checked,\n  deleteTaskHandler,\n  editTaskHandler,\n  checkTaskHandler,\n}) {\n  const [inputValue, setInputValue] = useState(title);\n  const [editMode, setEditMode] = useState(false);\n\n  return (\n    <li\n      id={id}\n      className={`task ${checked ? \"checked\" : \"\"} ${\n        editMode ? \"editMode\" : \"\"\n      }`}\n      onClick={(e) => {\n        if (!editMode && !e.target.classList.contains(\"bttn\")) {\n          checkTaskHandler();\n        }\n      }}\n    >\n      {!editMode ? (\n        <>\n          <span className=\"text\">{title}</span>\n          <button\n            className=\"bttn edit\"\n            onClick={() => setEditMode(true)}\n          ></button>\n          <button\n            className=\"bttn delete\"\n            onClick={() => {\n              deleteTaskHandler();\n            }}\n          ></button>\n        </>\n      ) : (\n        <>\n          <input\n            className=\"text\"\n            value={inputValue}\n            autoFocus\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n          <button\n            className=\"bttn confirm\"\n            onClick={() => {\n              editTaskHandler(inputValue);\n              setEditMode(false);\n            }}\n          ></button>\n          <button\n            className=\"bttn abort\"\n            onClick={() => setEditMode(false)}\n          ></button>\n        </>\n      )}\n    </li>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function NewTaskForm({ addTaskHandler }) {\n  let [newTaskTitle, setNewTaskTitle] = useState(\"\");\n\n  return (\n    <>\n      <form\n        className=\"inputArea\"\n        onSubmit={(e) => {\n          e.preventDefault();\n\n          if (`${newTaskTitle}`.replace(/\\s/g, \"\") === \"\") {\n            alert(\"Please enter a task\");\n          } else {\n            addTaskHandler(newTaskTitle);\n            setNewTaskTitle(\"\");\n          }\n        }}\n      >\n        <input\n          type=\"text\"\n          value={newTaskTitle}\n          maxlength=\"40\"\n          onChange={(e) => setNewTaskTitle(e.target.value)}\n          placeholder=\"Your no-task here\"\n        />\n\n        <button type=\"submit\" disabled={newTaskTitle === \"\"}>\n          Add\n        </button>\n      </form>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport TodoTask from \"../TodoTask\";\nimport NewTaskForm from \"../NewTaskForm\";\nimport { nanoid } from \"nanoid\";\n\nexport function TodoList({ tasks }) {\n  const [taskList, setTaskList] = useState(tasks);\n\n  const deleteTask = (id) => {\n    const index = taskList.findIndex((task) => task.id === id);\n    taskList.splice(index, 1);\n    setTaskList([...taskList]);\n  };\n\n  const addTask = (title) => {\n    const id = \"LI-\" + nanoid(10);\n    const newTaskList = [{ id: id, title: title, checked: false }, ...taskList];\n    setTaskList(newTaskList);\n  };\n\n  const editTask = (id, newTitle) => {\n    const index = taskList.findIndex((task) => task.id === id);\n    taskList[index].title = newTitle;\n    setTaskList([...taskList]);\n  };\n  const checkTask = (id) => {\n    const index = taskList.findIndex((task) => task.id === id);\n    taskList[index].checked = !taskList[index].checked;\n    setTaskList([...taskList]);\n  };\n\n  return (\n    <div>\n      <p>What are you NOT doing today:</p>\n      <NewTaskForm addTaskHandler={addTask} />\n      <p>Things not to do:</p>\n      <ul id=\"task-list\">\n        {taskList.map((task) => (\n          <TodoTask\n            key={task.id}\n            id={task.id}\n            title={task.title}\n            checked={task.checked}\n            deleteTaskHandler={() => {\n              deleteTask(task.id);\n            }}\n            editTaskHandler={(title) => {\n              editTask(task.id, title);\n            }}\n            checkTaskHandler={() => {\n              checkTask(task.id);\n            }}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport { TodoList } from \"./components/TodoList\";\n\nconst defaultTasks = [\n  { id: \"1\", title: \"Become a youtuber\", checked: false },\n  { id: \"2\", title: \"Explain stuff to Elie\", checked: false },\n  { id: \"3\", title: \"Use lack of sleep as an excuse\", checked: false },\n];\nexport default function App() {\n  return (\n    <div className=\"main\">\n      <h1>\n        <span>NOT</span>\n        <span>todo</span>\n        <span>LIST</span>\n      </h1>\n      <ol id=\"instructions\">\n        <li>Write down things not to do.</li>\n        <li>\n          If someone asks you to do said thing, just reply with: \"Sorry, but\n          that's on my Not Todo List.\"\n        </li>\n        <li>\n          If you successfully avoided doing said thing, cross it of your list.\n        </li>\n      </ol>\n      <TodoList tasks={defaultTasks} />\n      <i className=\"license\">\n        icons by fontawesome -{\" \"}\n        <a href=\"https://fontawesome.com/license\">license</a>\n      </i>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}